// machine.cc 
//  Routines for simulating the execution of user programs.
//
//  DO NOT CHANGE -- part of the machine emulation
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "machine.h"
#include "system.h"

// Textual names of the exceptions that can be generated by user program
// execution, for debugging.
static char* exceptionNames[] = { "no exception", "syscall", 
                "page fault/no TLB entry", "page read only",
                "bus error", "address error", "overflow",
                "illegal instruction" };

//----------------------------------------------------------------------
// CheckEndian
//  Check to be sure that the host really uses the format it says it 
//  does, for storing the bytes of an integer.  Stop on error.
//----------------------------------------------------------------------

static
void CheckEndian()
{
    union checkit {
        char charword[4];
        unsigned int intword;
    } check;

    check.charword[0] = 1;
    check.charword[1] = 2;
    check.charword[2] = 3;
    check.charword[3] = 4;

#ifdef HOST_IS_BIG_ENDIAN
    ASSERT (check.intword == 0x01020304);
#else
    ASSERT (check.intword == 0x04030201);
#endif
}

//----------------------------------------------------------------------
// Machine::Machine
//  Initialize the simulation of user program execution.
//
//  "debug" -- if TRUE, drop into the debugger after each user instruction
//      is executed.
//----------------------------------------------------------------------

Machine::Machine(bool debug)
{
    int i;

    for (i = 0; i < NumTotalRegs; i++)
        registers[i] = 0;
    mainMemory = new char[MemorySize];
    bzero(mainMemory, MemorySize);    //machie 
    for (i = 0; i < MemorySize; i++)
        mainMemory[i] = 0;
    // 位图管理内存
    mBitMap = new BitMap(NumPhysPages);
    physPageTable = new PhysicalPage[NumPhysPages];
    for (i = 0; i < NumPhysPages; ++i) {
           physPageTable[i].vaPageNum = -1;
           physPageTable[i].valid = FALSE;
    }
#ifdef USE_TLB
    tlb = new TranslationEntry[TLBSize];
    for (i = 0; i < TLBSize; i++)
    tlb[i].valid = FALSE;

    pageTable = NULL;
    hitTime = 0;
    missTime = 0;
    printf("TLB USE\n");
#else   // use linear page table
    tlb = NULL;
    pageTable = NULL;
    printf("TLB NOT USE\n");
#endif

      

    singleStep = debug;
    CheckEndian();
}

//----------------------------------------------------------------------
// Machine::~Machine
//  De-allocate the data structures used to simulate user program execution.
//----------------------------------------------------------------------

Machine::~Machine()
{
    delete [] mainMemory;
    if (tlb != NULL)
        delete [] tlb;
}

//----------------------------------------------------------------------
// Machine::RaiseException
//  Transfer control to the Nachos kernel from user mode, because
//  the user program either invoked a system call, or some exception
//  occured (such as the address translation failed).
//
//  "which" -- the cause of the kernel trap
//  "badVaddr" -- the virtual address causing the trap, if appropriate
//----------------------------------------------------------------------

void
Machine::RaiseException(ExceptionType which, int badVAddr)
{
    DEBUG('m', "Exception: %s\n", exceptionNames[which]);
    
//  ASSERT(interrupt->getStatus() == UserMode);
    registers[BadVAddrReg] = badVAddr;
    DelayedLoad(0, 0);          // finish anything in progress
    interrupt->setStatus(SystemMode);
    ExceptionHandler(which);        // interrupts are enabled at this point
    interrupt->setStatus(UserMode);
}

//----------------------------------------------------------------------
// Machine::Debugger
//  Primitive debugger for user programs.  Note that we can't use
//  gdb to debug user programs, since gdb doesn't run on top of Nachos.
//  It could, but you'd have to implement *a lot* more system calls
//  to get it to work!
//
//  So just allow single-stepping, and printing the contents of memory.
//----------------------------------------------------------------------

void Machine::Debugger()
{
    char *buf = new char[80];
    int num;

    interrupt->DumpState();
    DumpState();
    printf("%d> ", stats->totalTicks);
    fflush(stdout);
    fgets(buf, 80, stdin);
    if (sscanf(buf, "%d", &num) == 1)
    runUntilTime = num;
    else {
    runUntilTime = 0;
    switch (*buf) {
      case '\n':
        break;
        
      case 'c':
        singleStep = FALSE;
        break;
        
      case '?':
        printf("Machine commands:\n");
        printf("    <return>  execute one instruction\n");
        printf("    <number>  run until the given timer tick\n");
        printf("    c         run until completion\n");
        printf("    ?         print help message\n");
        break;
    }
    }
    delete [] buf;
}
 
//----------------------------------------------------------------------
// Machine::DumpState
//  Print the user program's CPU state.  We might print the contents
//  of memory, but that seemed like overkill.
//----------------------------------------------------------------------

void
Machine::DumpState()
{
    int i;
    
    printf("Machine registers:\n");
    for (i = 0; i < NumGPRegs; i++)
    switch (i) {
      case StackReg:
        printf("\tSP(%d):\t0x%x%s", i, registers[i],
           ((i % 4) == 3) ? "\n" : "");
        break;
        
      case RetAddrReg:
        printf("\tRA(%d):\t0x%x%s", i, registers[i],
           ((i % 4) == 3) ? "\n" : "");
        break;
      
      default:
        printf("\t%d:\t0x%x%s", i, registers[i],
           ((i % 4) == 3) ? "\n" : "");
        break;
    }
    
    printf("\tHi:\t0x%x", registers[HiReg]);
    printf("\tLo:\t0x%x\n", registers[LoReg]);
    printf("\tPC:\t0x%x", registers[PCReg]);
    printf("\tNextPC:\t0x%x", registers[NextPCReg]);
    printf("\tPrevPC:\t0x%x\n", registers[PrevPCReg]);
    printf("\tLoad:\t0x%x", registers[LoadReg]);
    printf("\tLoadV:\t0x%x\n", registers[LoadValueReg]);
    printf("\n");
}

//----------------------------------------------------------------------
// Machine::ReadRegister/WriteRegister
//      Fetch or write the contents of a user program register.
//----------------------------------------------------------------------

int Machine::ReadRegister(int num)
    {
    ASSERT((num >= 0) && (num < NumTotalRegs));
    return registers[num];
    }

void Machine::WriteRegister(int num, int value)
    {
    ASSERT((num >= 0) && (num < NumTotalRegs));
    // DEBUG('m', "WriteRegister %d, value %d\n", num, value);
    registers[num] = value;
    }

 void Machine::LRUSwapTLB(int badVAddr)
 {
               //printf("Bad Address 0x%x\n", badVAddr);
               unsigned int vpn = (unsigned) badVAddr / PageSize;    // 虚拟页号
               int minTime = tlb[0].lastUsedTime;
               TranslationEntry *entry = &tlb[0];          //  将要替换掉的页表项
               // 遍历TLB找到一个vaild为false，或者最后一次使用时间距离现在最长的，即最后一次使用时间最小的
               for (int i = 0; i < TLBSize; ++i) {
                      if (tlb[i].valid == false) {
                              entry = &tlb[i];
                              break;
                      }
                      else if (tlb[i].lastUsedTime < minTime) {
                              minTime = tlb[i].lastUsedTime;
                              entry = &tlb[i];
                      }
               }
               // 将TLB中将要替换下去的页表项的内容写回页表
               if (entry->valid)
                      pageTable[entry->virtualPage] = *entry;                     
               if (pageTable[vpn].valid)
                      *entry = pageTable[vpn];                        
               else {
                      AllocatePhysPage(badVAddr);
                      *entry = pageTable[vpn];
               } 
               //PrintTLB();

 }

 void Machine::FIFOSwapTLB(int badVAddr)
 {
               unsigned int vpn = (unsigned) badVAddr / PageSize;    // 虚拟页号
               int minTime = tlb[0].inTLBTime;
               TranslationEntry *entry = &tlb[0];          //  将要替换掉的页表项
               // 遍历TLB找到一个vaild为false，或者最先进入TLB的表项
               for (int i = 0; i < TLBSize; ++i) {
                      if (tlb[i].valid == FALSE) {
                              entry = &tlb[i];
                              break;
                      }
                      else if (tlb[i].inTLBTime < minTime) {
                              minTime = tlb[i].inTLBTime;
                              entry = &tlb[i];
                      }
               }
               // 将TLB中将要替换下去的页表项的内容写回页表
                if (entry->valid)
                      pageTable[entry->virtualPage] = *entry;               
               if (pageTable[vpn].valid)
                      *entry = pageTable[vpn];                        
               else {
                      AllocatePhysPage(badVAddr);
                      *entry = pageTable[vpn];
               } 
               entry->inTLBTime = stats->totalTicks;
 }

void Machine::ClearTLB() {
        for (int i = 0; i < TLBSize; ++i) {
             if (tlb[i].valid) {
                 pageTable[tlb[i].virtualPage] = tlb[i];
                 tlb[i].valid = FALSE;
             }
        }
}
 void Machine::PrintTLB() {
               printf("Now Total Ticks : %d\n", stats->totalTicks);
               printf("TLB : \n");
               printf("VPN  PPN   Valid  ReadOnly  Use  Dirty   InTLBTime LastUsedTime\n");
               for (int i = 0; i < TLBSize; ++i) {
                     tlb[i].Print();
               }
 }

 void Machine::AllocatePhysPage(int badVA)
 {
               unsigned int vpn = (unsigned) badVA / PageSize;    // 虚拟页号
               int virAddr = vpn * PageSize;
               pageTable[vpn].virtualPage = vpn;
            
               int ppn = mBitMap->Find();
             
               if (ppn != -1)   {    // 有空闲块
                      pageTable[vpn].physicalPage = ppn;
                      pageTable[vpn].valid = TRUE;
               }  else  {               // 需要完成物理页的置换
                      ppn = LRUSwapPages();
                      pageTable[vpn].physicalPage = ppn;
                      pageTable[vpn].valid = TRUE;
                      pageTable[vpn].dirty = FALSE;
               }

               physPageTable[ppn].vaPageNum = vpn;
               
               currentThread->space->vaSpace->ReadAt(&(machine->mainMemory[ppn*PageSize]), 
                PageSize, virAddr);
               
               physPageTable[ppn].valid =TRUE;
               physPageTable[ppn].dirty = FALSE;
               physPageTable[ppn].heldThreadID = currentThread->GetThreadID();
 }

 int Machine::LRUSwapPages()
 {
               int minTime = physPageTable[0].lastUsedTime;
               int swapPageNum= 0;
               for (int i = 0; i < NumPhysPages; ++i) {
                        if (physPageTable[i].lastUsedTime < minTime) {
                                minTime = physPageTable[i].lastUsedTime;
                                swapPageNum = i;
                      }
               }
               printf("Swap Page %d\n", swapPageNum);
               Thread* tempThread = threadsInfo[physPageTable[swapPageNum].heldThreadID];
               if (tempThread != NULL && physPageTable[swapPageNum].valid 
               && physPageTable[swapPageNum].dirty) {         // 写回文件
                      
                      tempThread->space->vaSpace->WriteAt(&(machine->mainMemory[swapPageNum * PageSize]), 
                        PageSize,  physPageTable[swapPageNum].vaPageNum * PageSize);
               }
               int swapVpn = physPageTable[swapPageNum].vaPageNum;
               if (tempThread != NULL) {
               tempThread->space->pageTable[swapVpn].valid = FALSE;
               tempThread->space->pageTable[swapVpn].dirty = FALSE;
             }
               return swapPageNum;
 }